import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

const DATA_DIR = path.join(process.cwd(), 'data');
const USERS_FILE = path.join(DATA_DIR, 'users.txt');
const DIET_DIR = path.join(DATA_DIR, 'diet');

// Ensure directories exist
if (!fs.existsSync(DIET_DIR)) {
  fs.mkdirSync(DIET_DIR, { recursive: true });
}

function readUsers() {
  if (!fs.existsSync(USERS_FILE)) {
    return [];
  }
  const content = fs.readFileSync(USERS_FILE, 'utf-8');
  if (!content.trim()) return [];
  
  return content.split('\n').filter(line => line.trim()).map(line => {
    const [email, password, name, hasDietData] = line.split('|');
    return { email, password, name, hasDietData: hasDietData === 'true' };
  });
}

function writeUsers(users) {
  const content = users.map(u => 
    `${u.email}|${u.password}|${u.name}|${u.hasDietData || false}`
  ).join('\n');
  fs.writeFileSync(USERS_FILE, content, 'utf-8');
}

export async function POST(request) {
  try {
    const { email, dietData } = await request.json();

    if (!email || !dietData) {
      return NextResponse.json(
        { error: 'Email and diet data are required' },
        { status: 400 }
      );
    }

    // Update user's hasDietData flag
    const users = readUsers();
    const userIndex = users.findIndex(u => u.email === email);
    
    if (userIndex === -1) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      );
    }

    users[userIndex].hasDietData = true;
    writeUsers(users);

    // Save diet data to separate file
    const userDietFile = path.join(DIET_DIR, `${email.replace('@', '_at_')}.txt`);
    const dietContent = `
===========================================
DIET PROFILE FOR: ${users[userIndex].name}
Email: ${email}
Date: ${new Date().toLocaleString()}
===========================================

PERSONAL INFORMATION:
- Age: ${dietData.age} years
- Gender: ${dietData.gender}
- Weight: ${dietData.weight} kg
- Height: ${dietData.height} cm
- BMI: ${(dietData.weight / Math.pow(dietData.height / 100, 2)).toFixed(2)}

ACTIVITY & GOALS:
- Activity Level: ${dietData.activityLevel}
- Primary Goal: ${dietData.goal}

DIETARY PREFERENCES:
- Restrictions: ${dietData.dietaryRestrictions || 'None'}

MEDICAL INFORMATION:
- Conditions: ${dietData.medicalConditions || 'None reported'}

CALCULATED VALUES:
- BMR (Basal Metabolic Rate): ${calculateBMR(dietData)} calories
- TDEE (Total Daily Energy): ${calculateTDEE(dietData)} calories
- Recommended Daily Intake: ${calculateRecommendedCalories(dietData)} calories

===========================================
Generated by DietPredict AI System
===========================================
`;

    fs.writeFileSync(userDietFile, dietContent, 'utf-8');

    return NextResponse.json({
      success: true,
      message: 'Diet data saved successfully'
    });
  } catch (error) {
    console.error('Save diet error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}

function calculateBMR(data) {
  const weight = parseFloat(data.weight);
  const height = parseFloat(data.height);
  const age = parseFloat(data.age);
  
  if (data.gender === 'male') {
    return Math.round(88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age));
  } else {
    return Math.round(447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age));
  }
}

function calculateTDEE(data) {
  const bmr = calculateBMR(data);
  const multipliers = {
    sedentary: 1.2,
    light: 1.375,
    moderate: 1.55,
    active: 1.725,
    veryActive: 1.9
  };
  
  return Math.round(bmr * (multipliers[data.activityLevel] || 1.2));
}

function calculateRecommendedCalories(data) {
  const tdee = calculateTDEE(data);
  const adjustments = {
    weightLoss: -500,
    weightGain: 500,
    maintenance: 0,
    muscle: 300
  };
  
  return tdee + (adjustments[data.goal] || 0);
}